//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Test Master ESP32 Lora Ra-02

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  --------------------------------------                                                                                                            //
// Description of the communication method between the Master and the Slaves.                                                                         //
//                                                                                                                                                    //
// > The Master sends a message containing the command to the Slave to send a reply message to the Master containing the humidity value,              //
//   temperature value, state of LED 1 and LED 2.                                                                                                     //
//                                                                                                                                                    //
// > Master sends messages to Slaves alternately every 1 second. So the Master sends a message to Slave 1,                                            //
//   delays 1 second, then sends a message to Slave 2, then delays 1 second. This was done to prevent collisions of reply messages from the Slaves.   //
//  --------------------------------------                                                                                                            //
//                                                                                                                                                    //
//  --------------------------------------                                                                                                            //
//  Additional information :                                                                                                                          //
//                                                                                                                                                    //
//  If you are sure that you have connected the Lora Ra-02 correctly to the ESP32,                                                                    //
//  but you get the error message "LoRa init failed ! Check your connections", then try using an external power source for the Lora Ra-02.            //
//  In this project I used a 3.3V power supply from an ESP32 board to power the Lora Ra-02.                                                           //
//  Because maybe the quality of the ESP32 board module is different in the market and the power supply is not strong enough to power the Lora Ra-02. //
//  So you get the error message "LoRa init failed ! Check your connections".                                                                         //
//  --------------------------------------                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//---------------------------------------- Include Library.
#include <SPI.h>
#include <LoRa.h>
//----------------------------------------

//---------------------------------------- LoRa Pin / GPIO configuration.
#define ss 5
#define rst 14
#define dio0 2
//----------------------------------------

//---------------------------------------- Variable declaration to hold incoming and outgoing data.
String Incoming = "";
String Message = "";            
//----------------------------------------

//---------------------------------------- LoRa data transmission configuration.
byte LocalAddress = 0x01;               //--> address of this device (Master Address).
byte Destination_ESP32_Slave_1 = 0x02;  //--> destination to send to Slave 1 (ESP32).
byte Destination_ESP32_Slave_2 = 0x03;  //--> destination to send to Slave 2 (ESP32).
//---------------------------------------- 

//---------------------------------------- Variable declaration for Millis/Timer.
unsigned long previousMillis_SendMSG = 0;
const long interval_SendMSG = 1000;
//---------------------------------------- 

// Variable declaration to count slaves.
byte Slv = 0;

//________________________________________________________________________________ Subroutines for sending data (LoRa Ra-02).
void sendMessage(String Outgoing, byte Destination) {
  LoRa.beginPacket();             //--> start packet
  LoRa.write(Destination);        //--> add destination address
  LoRa.write(LocalAddress);       //--> add sender address
  LoRa.write(Outgoing.length());  //--> add payload length
  LoRa.print(Outgoing);           //--> add payload
  LoRa.endPacket();               //--> finish packet and send it
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutines for receiving data (LoRa Ra-02).
void onReceive(int packetSize) {
  if (packetSize == 0) return;  //--> if there's no packet, return

  //---------------------------------------- read packet header bytes:
  int recipient = LoRa.read();        //--> recipient address
  byte sender = LoRa.read();          //--> sender address
  byte incomingLength = LoRa.read();  //--> incoming msg length
  //---------------------------------------- 

  // Clears Incoming variable data.
  Incoming = "";

  //---------------------------------------- Get all incoming data.
  while (LoRa.available()) {
    Incoming += (char)LoRa.read();
  }
  //---------------------------------------- 

  //---------------------------------------- Check length for error.
  if (incomingLength != Incoming.length()) {
    Serial.println();
    Serial.println("error: message length does not match length");
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  //---------------------------------------- Checks whether the incoming data or message for this device.
  if (recipient != LocalAddress) {
    Serial.println();
    Serial.println("This message is not for me.");
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  //---------------------------------------- if message is for this device, or broadcast, print details:
  Serial.println();
  Serial.println("Received from: 0x" + String(sender, HEX));
  //Serial.println("Message length: " + String(incomingLength));
  Serial.println("Message: " + Incoming);
  //Serial.println("RSSI: " + String(LoRa.packetRssi()));
  //Serial.println("Snr: " + String(LoRa.packetSnr()));
  //---------------------------------------- 
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID SETUP
void setup() {
  // put your setup code here, to run once:

  Serial.begin(115200);

  //---------------------------------------- Settings and start Lora Ra-02.
  LoRa.setPins(ss, rst, dio0);

  Serial.println("Start LoRa init...");
  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 or 433 MHz
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }
  Serial.println("LoRa init succeeded.");
  //---------------------------------------- 
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID LOOP
void loop() {
  // put your main code here, to run repeatedly:

  //---------------------------------------- Millis or Timer to send message / command data to slaves every 1 second (see interval_SendCMD variable).
  // Messages are sent every one second is alternately.
  // > Master sends message to Slave 1, delay 1 second.
  // > Master sends message to Slave 2, delay 1 second.
  
  unsigned long currentMillis_SendMSG = millis();
  
  if (currentMillis_SendMSG - previousMillis_SendMSG >= interval_SendMSG) {
    previousMillis_SendMSG = currentMillis_SendMSG;

    Slv++;
    if (Slv > 2) Slv = 1;

    Message = "SDS" + String(Slv);

    //::::::::::::::::: Condition for sending message / command data to Slave 1 (ESP32 Slave 1).
    if (Slv == 1) {
      Serial.println();
      Serial.print("Send message to ESP32 Slave " + String(Slv));
      Serial.println(" : " + Message);
      sendMessage(Message, Destination_ESP32_Slave_1);
    }
    //:::::::::::::::::

    //::::::::::::::::: Condition for sending message / command data to Slave 2 (UNO Slave 2).
    if (Slv == 2) {
      Serial.println();
      Serial.print("Send message to ESP32 Slave " + String(Slv));
      Serial.println(" : " + Message);
      sendMessage(Message, Destination_ESP32_Slave_2);
    }
    //:::::::::::::::::
  }
  //----------------------------------------

  //---------------------------------------- parse for a packet, and call onReceive with the result:
  onReceive(LoRa.parsePacket());
  //----------------------------------------
}
//________________________________________________________________________________ 
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Test Slave (1 or 2) ESP32 Lora Ra-02
//---------------------------------------- Include Library.
#include <SPI.h>
#include <LoRa.h>
#include "DHT.h"
//---------------------------------------- 

//---------------------------------------- Defines the DHT11 Pin and the DHT type.
#define DHTPIN      15
#define DHTTYPE     DHT11
//---------------------------------------- 

//---------------------------------------- Defines LED Pins.
#define LED_1_Pin   27
#define LED_2_Pin   25
//---------------------------------------- 

//---------------------------------------- LoRa Pin / GPIO configuration.
#define ss 5
#define rst 14
#define dio0 2
//----------------------------------------

// Initializes the DHT sensor (DHT11).
DHT dht11(DHTPIN, DHTTYPE);

//---------------------------------------- Variable declaration to hold incoming and outgoing data.
String Incoming = "";
String Message = "";             
//----------------------------------------

//---------------------------------------- LoRa data transmission configuration.
////////////////////////////////////////////////////////////////////////////
// PLEASE UNCOMMENT AND SELECT ONE OF THE "LocalAddress" VARIABLES BELOW. //
////////////////////////////////////////////////////////////////////////////

//byte LocalAddress = 0x02;       //--> address of this device (Slave 1).
//byte LocalAddress = 0x03;       //--> address of this device (Slave 2).

byte Destination_Master = 0x01; //--> destination to send to Master (ESP32).
//----------------------------------------

//---------------------------------------- Variable declarations for temperature and humidity values.
int h = 0;
float t = 0.0;
byte LED_1_State;
byte LED_2_State;
//---------------------------------------- 

//---------------------------------------- Millis / Timer to update temperature and humidity values from DHT11 sensor.
unsigned long previousMillis_UpdateDHT11 = 0;
const long interval_UpdateDHT11 = 2000;
//---------------------------------------- 

//________________________________________________________________________________ Subroutines for sending data (LoRa Ra-02).
void sendMessage(String Outgoing, byte Destination) {
  LoRa.beginPacket();             //--> start packet
  LoRa.write(Destination);        //--> add destination address
  LoRa.write(LocalAddress);       //--> add sender address
  LoRa.write(Outgoing.length());  //--> add payload length
  LoRa.print(Outgoing);           //--> add payload
  LoRa.endPacket();               //--> finish packet and send it
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutines for receiving data (LoRa Ra-02).
void onReceive(int packetSize) {
  if (packetSize == 0) return;  //--> if there's no packet, return

  //---------------------------------------- read packet header bytes:
  int recipient = LoRa.read();        //--> recipient address
  byte sender = LoRa.read();          //--> sender address
  byte incomingLength = LoRa.read();  //--> incoming msg length
  //---------------------------------------- 

  // Clears Incoming variable data.
  Incoming = "";

  //---------------------------------------- Get all incoming data.
  while (LoRa.available()) {
    Incoming += (char)LoRa.read();
  }
  //---------------------------------------- 

  //---------------------------------------- Check length for error.
  if (incomingLength != Incoming.length()) {
    Serial.println();
    Serial.println("error: message length does not match length");
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  //---------------------------------------- Checks whether the incoming data or message for this device.
  if (recipient != LocalAddress) {
    Serial.println();
    Serial.println("This message is not for me.");
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  //---------------------------------------- if message is for this device, or broadcast, print details:
  Serial.println();
  Serial.println("Received from: 0x" + String(sender, HEX));
  //Serial.println("Message length: " + String(incomingLength));
  Serial.println("Message: " + Incoming);
  //Serial.println("RSSI: " + String(LoRa.packetRssi()));
  //Serial.println("Snr: " + String(LoRa.packetSnr()));
  //---------------------------------------- 

  // Calls the Processing_incoming_data() subroutine.
  Processing_incoming_data();
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutines to process data from incoming messages, then send messages to the Master.
void Processing_incoming_data() {
  //---------------------------------------- Conditions for sending messages to Master.
/////////////////////////////////////////////////////////////////////////////////////////
// PLEASE UNCOMMENT THE LINE OF CODE BELOW IF THIS CODE OR THIS DEVICE IS FOR SLAVE 1. //
/////////////////////////////////////////////////////////////////////////////////////////

//  if (Incoming == "SDS1") {
//    digitalWrite(LED_1_Pin, !digitalRead(LED_1_Pin));
//    digitalWrite(LED_2_Pin, !digitalRead(LED_2_Pin));
//    
//    LED_1_State = digitalRead(LED_1_Pin);
//    LED_2_State = digitalRead(LED_2_Pin);
//
//    Message = "";
//    Message = "SL1," + String(h) + "," + String(t) + "," + String(LED_1_State) + "," + String(LED_2_State);
//
//    Serial.println();
//    Serial.println("Send message to Master");
//    Serial.print("Message: ");
//    Serial.println(Message);
//    
//    sendMessage(Message, Destination_Master);
//  }
  //---------------------------------------- 

  //---------------------------------------- Conditions for sending messages to Master.
/////////////////////////////////////////////////////////////////////////////////////////
// PLEASE UNCOMMENT THE LINE OF CODE BELOW IF THIS CODE OR THIS DEVICE IS FOR SLAVE 2. //
/////////////////////////////////////////////////////////////////////////////////////////

//  if (Incoming == "SDS2") {
//    digitalWrite(LED_1_Pin, !digitalRead(LED_1_Pin));
//    digitalWrite(LED_2_Pin, !digitalRead(LED_2_Pin));
//    
//    LED_1_State = digitalRead(LED_1_Pin);
//    LED_2_State = digitalRead(LED_2_Pin);
//
//    Message = "";
//    Message = "SL2," + String(h) + "," + String(t) + "," + String(LED_1_State) + "," + String(LED_2_State);
//
//    Serial.println();
//    Serial.println("Send message to Master");
//    Serial.print("Message: ");
//    Serial.println(Message);
//    
//    sendMessage(Message, Destination_Master);
//  }
  //---------------------------------------- 
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID SETUP
void setup() {
  // put your setup code here, to run once:

  Serial.begin(115200);

  pinMode(LED_1_Pin, OUTPUT);
  pinMode(LED_2_Pin, OUTPUT);

  delay(100);

  digitalWrite(LED_1_Pin, HIGH);
  digitalWrite(LED_2_Pin, LOW);

  dht11.begin();

  //---------------------------------------- Settings and start Lora Ra-02.
  LoRa.setPins(ss, rst, dio0);
  
  Serial.println();
  Serial.println("Start LoRa init...");
  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 or 433 MHz
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }
  Serial.println("LoRa init succeeded.");
  //---------------------------------------- 
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID LOOP
void loop() {
  // put your main code here, to run repeatedly:

  //---------------------------------------- Millis / Timer to update the temperature and humidity values ​​from the DHT11 sensor every 2 seconds (see the variable interval_UpdateDHT11).
  unsigned long currentMillis_UpdateDHT11 = millis();
  
  if (currentMillis_UpdateDHT11 - previousMillis_UpdateDHT11 >= interval_UpdateDHT11) {
    previousMillis_UpdateDHT11 = currentMillis_UpdateDHT11;

    // Reading temperature or humidity takes about 250 milliseconds!
    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    h = dht11.readHumidity();
    // Read temperature as Celsius (the default)
    t = dht11.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
    //float f = dht.readTemperature(true);
  
    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t)) {
      Serial.println(F("Failed to read from DHT sensor!"));
      h = 0;
      t = 0.0;
    }
  }
  //---------------------------------------- 
  
  //---------------------------------------- parse for a packet, and call onReceive with the result:
  onReceive(LoRa.parsePacket());
  //----------------------------------------
}
//________________________________________________________________________________ 
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ESP32 Lora Ra-02 Master Web Server STA MODE

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  --------------------------------------                                                                                                            //
//  A brief description of how this project works.                                                                                                    //
//                                                                                                                                                    //
//  There are 2 types/modes of messages sent by the Master, namely:                                                                                   //
//  1. "get_Data_Mode".                                                                                                                               //
//    > In this mode the Master sends a message containing the command for the Slaves to send the reading status of the DHT11 sensor, humidity value, //
//      temperature value, state of LED 1 and LED 2.                                                                                                  //
//    > In this mode the Master sends messages to Slave 1 and Slave 2 alternately every 1 second.                                                     //
//      This is done so that there is no collision between incoming messages from Slave 1 and Slave 2.                                                //
//    > The message sent contains:                                                                                                                    //
//      "destination_address | sender_address | message_length | mode | message_content".                                                             //
//      destination_address     = address of Slave 1 or Slave 2.                                                                                      //
//      sender_address          = Master address.                                                                                                     //
//      message_content_length  = total number of "characters" in the message sent (destination_address , sender_address and mode not included).      //
//                                In this mode this section is empty/NULL.                                                                            //
//      mode                    = contains values ​​1 and 2. Value 1 for "get_Data_Mode".                                                               //
//      message_content         = message content in the form of characters (String). In this mode this section is empty/NULL.                        //
//                                                                                                                                                    //
//      For example, send a message to Slave 1:                                                                                                       //
//      "0x02 | 0x01 | NULL | 1 | NULL"                                                                                                               //
//      0x02  = address of Slave 1.                                                                                                                   //
//      0x01  = Master address.                                                                                                                       //
//      1     = "get_Data_Mode". Notifies the intended Slave (for example Slave 1) to send a reply message containing the humidity value,             //
//              temperature value, state of LED 1 and LED 2.                                                                                          //
//    > After the message is received by the intended Slave (Slave 1 or Slave 2). Then the slave will send a reply message containing:                //
//      "destination_address | sender_address | message_content | message_content".                                                                   //
//      destination_address     = Master address.                                                                                                     //
//      sender_address          = address of Slave 1 or Slave 2.                                                                                      //
//      message_content_length  = total number of "characters" in the message sent (destination_address , sender_address and mode not included).      //
//      message_content         = message content in the form of characters (String).                                                                 //
//                                                                                                                                                    //
//      For example, Slave 1 sends a reply message to Master:                                                                                         //
//      "0x01 | 0x02 | 14 | s,80,30,50,0,1"                                                                                                           //
//      0x01            = Master address.                                                                                                             //
//      0x02            = address of Slave 1.                                                                                                         //
//      14              = total number of "characters" in the message sent. The content of the message sent is: "s,80,30.50,0,1" ,                    //
//                        the total number of characters is 14 characters.                                                                            //
//      s,80,30.50,0,1  = data.                                                                                                                       //
//                        s     = DHT11 sensor reading status, "s" if successful and "f" if failed.                                                   //
//                        80    = humidity value.                                                                                                     //
//                        30.50 = temperature value.                                                                                                  //
//                        0     = LED 1 state (0 if off, 1 if on).                                                                                    //
//                        1     = LED 2 state (0 if off, 1 if on).                                                                                    //
//                                                                                                                                                    //
//  2. "led_Control_Mode".                                                                                                                            //
//    > In this mode the Master sends a message containing the command to control LED 1 and LED 2 on the Slaves.                                      //
//    > In this mode the Master sends a message to Slave 1 or Slave 2 each time the Button to control the LED on the web server page (GUI)            //
//      is pressed/clicked.                                                                                                                           //
//    > The message sent contains:                                                                                                                    //
//    "destination_address | sender_address | message_length | mode | message_content".                                                               //
//    destination_address     = address of Slave 1 or Slave 2.                                                                                        //
//    sender_address          = Master address.                                                                                                       //
//    message_content_length  = total number of "characters" in the message sent (destination_address , sender_address and mode not included).        //
//    mode                    = contains values ​​1 and 2. Value 2 for "led_Control_Mode".                                                              //
//    message_content         = message content in the form of characters (String).                                                                   //
//                                                                                                                                                    //
//    For example, send a message to Slave 1:                                                                                                         //
//    "0x02 | 0x01 | 3 | 2 | 1,t"                                                                                                                     //
//    0x02  = address of Slave 1.                                                                                                                     //
//    0x01  = Master address.                                                                                                                         //
//    3     = total number of "characters" in the message sent. The content of the message sent is: "1,1" ,                                           //
//            the total number of characters is 3 characters.                                                                                         //
//    2     = "led_Control_Mode". Notifies the intended Slave (for example Slave 1) that a message was sent to control the LED.                       //
//    1,t   = data.                                                                                                                                   //
//            1 = LED number controlled (1 for "LED 1" and 2 for "LED 2").                                                                            //
//            t = Sets the LED state ("t" to turn on and "f" to turn off).                                                                            //
//  --------------------------------------                                                                                                            //
//                                                                                                                                                    //
//  --------------------------------------                                                                                                            //
//  Additional information :                                                                                                                          //
//                                                                                                                                                    //
//  If you are sure that you have connected the Lora Ra-02 correctly to the ESP32,                                                                    //
//  but you get the error message "LoRa init failed ! Check your connections", then try using an external power source for the Lora Ra-02.            //
//  In this project I used a 3.3V power supply from an ESP32 board to power the Lora Ra-02.                                                           //
//  Because maybe the quality of the ESP32 board module is different in the market and the power supply is not strong enough to power the Lora Ra-02. //
//  So you get the error message "LoRa init failed ! Check your connections".                                                                         //
//  --------------------------------------                                                                                                            //
//                                                                                                                                                    //
//  --------------------------------------                                                                                                            //
//  SORRY IF MY ENGLISH IS CONFUSING, I USE AN ONLINE TRANSLATOR.                                                                                     //
//  --------------------------------------                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//---------------------------------------- Include Library.
#include <SPI.h>
#include <LoRa.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Arduino_JSON.h>
//---------------------------------------- 

#include "PageIndex.h" 

//---------------------------------------- LoRa Pin / GPIO configuration.
#define ss 5
#define rst 14
#define dio0 2
//----------------------------------------

//---------------------------------------- Variable declaration for your network credentials.
const char* ssid = "REPLACE_WITH_YOUR_SSID";
const char* password = "REPLACE_WITH_YOUR_PASSWORD";
//----------------------------------------

//---------------------------------------- Variable declaration to hold incoming and outgoing data.
String Incoming = "";
String Message = ""; 
//----------------------------------------

//---------------------------------------- LoRa data transmission configuration.
byte LocalAddress = 0x01;               //--> address of this device (Master Address).
byte Destination_ESP32_Slave_1 = 0x02;  //--> destination to send to Slave 1 (ESP32).
byte Destination_ESP32_Slave_2 = 0x03;  //--> destination to send to Slave 2 (ESP32).
const byte get_Data_Mode = 1;           //--> Mode to get the reading status of the DHT11 sensor, humidity value, temperature value, state of LED 1 and LED 2.
const byte led_Control_Mode = 2;        //--> Mode to control LED 1 and LED 2 on the targeted Slave.
//---------------------------------------- 

//---------------------------------------- Variable declaration for Millis/Timer.
unsigned long previousMillis_SendMSG_to_GetData = 0;
const long interval_SendMSG_to_GetData = 1000;

unsigned long previousMillis_RestartLORA = 0;
const long interval_RestartLORA = 1000;
//---------------------------------------- 

//---------------------------------------- Variables to accommodate the reading status of the DHT11 sensor, humidity value, temperature value, state of LED 1 and LED 2.
int Humd[2];
float Temp[2];
String LED_1_State_str = "";
String LED_2_State_str = "";
String receive_Status_Read_DHT11 = "";
bool LED_1_State_bool = false;
bool LED_2_State_bool = false;
//---------------------------------------- 

//---------------------------------------- The variables used to check the parameters passed in the URL.
// Look in the "PageIndex.h" file.
// xhr.open("GET", "set_LED?Slave_Num="+slave+"&LED_Num="+led_num+"&LED_Val="+value, true);
// For example :
// set_LED?Slave_Num=S1&LED_Num=1&LED_Val=1
// PARAM_INPUT_1 = S1
// PARAM_INPUT_2 = 1
// PARAM_INPUT_3 = 1
const char* PARAM_INPUT_1 = "Slave_Num";
const char* PARAM_INPUT_2 = "LED_Num";
const char* PARAM_INPUT_3 = "LED_Val";
//---------------------------------------- 

//---------------------------------------- Variable declaration to hold data from the web server to control the LED.
String Slave_Number = "";
String LED_Number = "";
String LED_Value = "";
//---------------------------------------- 

// Variable declaration to count slaves.
byte Slv = 0;

// Variable declaration to get the address of the slaves.
byte slave_Address;

// Declaration of variable as counter to restart Lora Ra-02.
byte count_to_Rst_LORA = 0;

// Variable declaration to notify that the process of receiving the message has finished.
bool finished_Receiving_Message = false;

// Variable declaration to notify that the process of sending the message has finished.
bool finished_Sending_Message = false;

// Variable declaration to start sending messages to Slaves to control the LEDs.
bool send_Control_LED = false;

// Initialize JSONVar
JSONVar JSON_All_Data_Received;

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Create an Event Source on /events
AsyncEventSource events("/events");

//________________________________________________________________________________ Subroutines for sending data (LoRa Ra-02).
void sendMessage(String Outgoing, byte Destination, byte SendMode) { 
  finished_Sending_Message = false;

  Serial.println();
  Serial.println("Tr to  : 0x" + String(Destination, HEX));
  Serial.print("Mode   : ");
  if (SendMode == 1) Serial.println("Getting Data");
  if (SendMode == 2) Serial.println("Controlling LED.");
  Serial.println("Message: " + Outgoing);
  
  LoRa.beginPacket();             //--> start packet
  LoRa.write(Destination);        //--> add destination address
  LoRa.write(LocalAddress);       //--> add sender address
  LoRa.write(Outgoing.length());  //--> add payload length
  LoRa.write(SendMode);           //--> 
  LoRa.print(Outgoing);           //--> add payload
  LoRa.endPacket();               //--> finish packet and send it
  
  finished_Sending_Message = true;
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutines for receiving data (LoRa Ra-02).
void onReceive(int packetSize) {
  if (packetSize == 0) return;          // if there's no packet, return

  finished_Receiving_Message = false;

  //---------------------------------------- read packet header bytes:
  int recipient = LoRa.read();        //--> recipient address
  byte sender = LoRa.read();          //--> sender address
  byte incomingLength = LoRa.read();  //--> incoming msg length
  //---------------------------------------- 

  // Clears Incoming variable data.
  Incoming = "";

  //---------------------------------------- Get all incoming data / message.
  while (LoRa.available()) {
    Incoming += (char)LoRa.read();
  }
  //---------------------------------------- 

  // Resets the value of the count_to_Rst_LORA variable if a message is received.
  count_to_Rst_LORA = 0;

  //---------------------------------------- Check length for error.
  if (incomingLength != Incoming.length()) {
    Serial.println();
    Serial.println("er"); //--> "er" = error: message length does not match length.
    //Serial.println("error: message length does not match length");
    finished_Receiving_Message = true;
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  //---------------------------------------- Checks whether the incoming data or message for this device.
  if (recipient != LocalAddress) {
    Serial.println();
    Serial.println("!");  //--> "!" = This message is not for me.
    //Serial.println("This message is not for me.");
    finished_Receiving_Message = true;
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  //----------------------------------------  if message is for this device, or broadcast, print details:
  Serial.println();
  Serial.println("Rc from: 0x" + String(sender, HEX));
  Serial.println("Message: " + Incoming);
  //---------------------------------------- 

  // Get the address of the senders or slaves.
  slave_Address = sender;

  // Calls the Processing_incoming_data() subroutine.
  Processing_incoming_data();

  finished_Receiving_Message = true;
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutines to process data from incoming messages.
void Processing_incoming_data() {
  
//  Examples of the contents of messages received from slaves are as follows: "s,80,30.50,1,0" , 
//  to separate them based on the comma character, the "GetValue" subroutine is used and the order is as follows:
//  GetValue(Incoming, ',', 0) = s
//  GetValue(Incoming, ',', 1) = 80
//  GetValue(Incoming, ',', 2) = 30.50
//  GetValue(Incoming, ',', 3) = 1
//  GetValue(Incoming, ',', 4) = 0

  //---------------------------------------- Conditions for processing data or messages from Slave 1 (ESP32 Slave 1).
  if (slave_Address == Destination_ESP32_Slave_1) {
    receive_Status_Read_DHT11 = GetValue(Incoming, ',', 0);
    if (receive_Status_Read_DHT11 == "f") receive_Status_Read_DHT11 = "FAILED";
    if (receive_Status_Read_DHT11 == "s") receive_Status_Read_DHT11 = "SUCCEED";
    Humd[0] = GetValue(Incoming, ',', 1).toInt();
    Temp[0] = GetValue(Incoming, ',', 2).toFloat();
    LED_1_State_str = GetValue(Incoming, ',', 3);
    LED_2_State_str = GetValue(Incoming, ',', 4);
    if (LED_1_State_str == "1" || LED_1_State_str == "0") {
      LED_1_State_bool = LED_1_State_str.toInt();
    }
    if (LED_2_State_str == "1" || LED_2_State_str == "0") {
      LED_2_State_bool = LED_2_State_str.toInt();
    }

    // Calls the Send_Data_to_WS() subroutine.
    Send_Data_to_WS("S1", 1);
  }
  //---------------------------------------- 

  //---------------------------------------- Conditions for processing data or messages from Slave 2 (ESP32 Slave 2).
  if (slave_Address == Destination_ESP32_Slave_2) {
    receive_Status_Read_DHT11 = GetValue(Incoming, ',', 0);
    if (receive_Status_Read_DHT11 == "f") receive_Status_Read_DHT11 = "FAILED";
    if (receive_Status_Read_DHT11 == "s") receive_Status_Read_DHT11 = "SUCCEED";
    Humd[1] = GetValue(Incoming, ',', 1).toInt();
    Temp[1] = GetValue(Incoming, ',', 2).toFloat();
    LED_1_State_str = GetValue(Incoming, ',', 3);
    LED_2_State_str = GetValue(Incoming, ',', 4);
    if (LED_1_State_str == "1" || LED_1_State_str == "0") {
      LED_1_State_bool = LED_1_State_str.toInt();
    }
    if (LED_2_State_str == "1" || LED_2_State_str == "0") {
      LED_2_State_bool = LED_2_State_str.toInt();
    }

    // Calls the Send_Data_to_WS() subroutine.
    Send_Data_to_WS("S2", 2);
  }
  //---------------------------------------- 
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutine to send data received from Slaves to the web server to be displayed.
void Send_Data_to_WS(char ID_Slave[5], byte Slave) {
  //:::::::::::::::::: Enter the received data into JSONVar(JSON_All_Data_Received).
  JSON_All_Data_Received["ID_Slave"] = ID_Slave;
  JSON_All_Data_Received["StatusReadDHT11"] = receive_Status_Read_DHT11;
  JSON_All_Data_Received["Humd"] = Humd[Slave-1];
  JSON_All_Data_Received["Temp"] = Temp[Slave-1];
  JSON_All_Data_Received["LED1"] = LED_1_State_bool;
  JSON_All_Data_Received["LED2"] = LED_2_State_bool; 
  //:::::::::::::::::: 
  
  //:::::::::::::::::: Create a JSON String to hold all data received from the sender.
  String jsonString_Send_All_Data_received = JSON.stringify(JSON_All_Data_Received);
  //:::::::::::::::::: 
  
  //:::::::::::::::::: Sends all data received from the sender to the browser as an event ('allDataJSON').
  events.send(jsonString_Send_All_Data_received.c_str(), "allDataJSON", millis());
  //::::::::::::::::::  
}
//________________________________________________________________________________ 

//________________________________________________________________________________ String function to process the data received
// I got this from : https://www.electroniclinic.com/reyax-lora-based-multiple-sensors-monitoring-using-arduino/
String GetValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;
  
  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutine to reset Lora Ra-02.
void Rst_LORA() {
  LoRa.setPins(ss, rst, dio0);

  Serial.println();
  Serial.println("Restart LoRa...");
  Serial.println("Start LoRa init...");
  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 or 433 MHz
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }
  Serial.println("LoRa init succeeded.");

  // Reset the value of the count_to_Rst_LORA variable.
  count_to_Rst_LORA = 0;
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID SETUP
void setup() {
  // put your setup code here, to run once:

  Serial.begin(115200);

  //---------------------------------------- Clears the values of the Temp and Humd array variables for the first time.
  for (byte i = 0; i < 2; i++) {
    Humd[i] = 0;
    Temp[i] = 0.00;
  }
  //---------------------------------------- 

  //---------------------------------------- Set Wifi to STA mode
  Serial.println();
  Serial.println("-------------");
  Serial.println("WIFI mode : STA");
  WiFi.mode(WIFI_STA);
  Serial.println("-------------");
  //---------------------------------------- 

  delay(100);

  //---------------------------------------- Connect to Wi-Fi (STA).
  Serial.println("------------");
  Serial.println("WIFI STA");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  
  //:::::::::::::::::: The process of connecting ESP32 with WiFi Hotspot / WiFi Router.
  // The process timeout of connecting ESP32 with WiFi Hotspot / WiFi Router is 20 seconds.
  // If within 20 seconds the ESP32 has not been successfully connected to WiFi, the ESP32 will restart.
  // I made this condition because on my ESP32, there are times when it seems like it can't connect to WiFi, so it needs to be restarted to be able to connect to WiFi.
  
  int connecting_process_timed_out = 20; //--> 20 = 20 seconds.
  connecting_process_timed_out = connecting_process_timed_out * 2;
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
    if(connecting_process_timed_out > 0) connecting_process_timed_out--;
    if(connecting_process_timed_out == 0) {
      delay(1000);
      ESP.restart();
    }
  }
  
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("------------");
  //:::::::::::::::::: 
  //---------------------------------------- 

  delay(500);

  //---------------------------------------- Handle Web Server
  Serial.println();
  Serial.println("Setting Up the Main Page on the Server.");
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", MAIN_page);
  });
  //---------------------------------------- 

  //---------------------------------------- Handle Web Server Events
  Serial.println();
  Serial.println("Setting up event sources on the Server.");
  events.onConnect([](AsyncEventSourceClient *client){
    if(client->lastId()){
      Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client->lastId());
    }
    // send event with message "hello!", id current millis
    // and set reconnect delay to 10 second
    client->send("hello!", NULL, millis(), 10000);
  });
  //---------------------------------------- 

  //---------------------------------------- Send a GET request to <ESP_IP>/set_LED?Slave_Num=<inputMessage1>&LED_Num=<inputMessage2>&LED_Val=<inputMessage3>
  server.on("/set_LED", HTTP_GET, [] (AsyncWebServerRequest *request) {
    //:::::::::::::::::: 
    // GET input value on <ESP_IP>/set_LED?Slave_Num=<inputMessage1>&LED_Num=<inputMessage2>&LED_Val=<inputMessage3>
    // PARAM_INPUT_1 = inputMessage1
    // PARAM_INPUT_2 = inputMessage2
    // PARAM_INPUT_3 = inputMessage3
    // Slave_Number = PARAM_INPUT_1
    // LED_Number = PARAM_INPUT_2
    // LED_Value = PARAM_INPUT_3
    //:::::::::::::::::: 
    
    if (request->hasParam(PARAM_INPUT_1) && request->hasParam(PARAM_INPUT_2) && request->hasParam(PARAM_INPUT_3)) {
      Slave_Number = request->getParam(PARAM_INPUT_1)->value();
      LED_Number = request->getParam(PARAM_INPUT_2)->value();
      LED_Value = request->getParam(PARAM_INPUT_3)->value();

      String Rslt = "Slave : " + Slave_Number + " || LED : " + LED_Number + " || Set to : " + LED_Value;
      Serial.println();
      Serial.println(Rslt);
      send_Control_LED = true;
    }
    else {
      send_Control_LED = false;
      Slave_Number = "No message sent";
      LED_Number = "No message sent";
      LED_Value = "No message sent";
      String Rslt = "Slave : " + Slave_Number + " || LED : " + LED_Number + " || Set to : " + LED_Value;
      Serial.println();
      Serial.println(Rslt);
    }
    request->send(200, "text/plain", "OK");
  });
  //---------------------------------------- 

  //---------------------------------------- Adding event sources on the Server.
  Serial.println();
  Serial.println("Adding event sources on the Server.");
  server.addHandler(&events);
  //---------------------------------------- 

  //---------------------------------------- Starting the Server.
  Serial.println();
  Serial.println("Starting the Server.");
  server.begin();
  //---------------------------------------- 

  // Calls the Rst_LORA() subroutine.
  Rst_LORA();

  Serial.println();
  Serial.println("------------");
  Serial.print("ESP32 IP address : ");
  Serial.println(WiFi.localIP());
  Serial.println();
  Serial.println("Visit the IP Address above in your browser to open the main page.");
  Serial.println("------------");
  Serial.println();
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID LOOP
void loop() {
  // put your main code here, to run repeatedly:

  //---------------------------------------- Millis/Timer to send messages to slaves every 1 second (see interval_SendMSG_to_GetData variable).
  //  Messages are sent every one second is alternately.
  //  > Master sends message to Slave 1, delay 1 second.
  //  > Master sends message to Slave 2, delay 1 second.
  
  unsigned long currentMillis_SendMSG_to_GetData = millis();
  
  if (currentMillis_SendMSG_to_GetData - previousMillis_SendMSG_to_GetData >= interval_SendMSG_to_GetData) {
    previousMillis_SendMSG_to_GetData = currentMillis_SendMSG_to_GetData;

    Slv++;
    if (Slv > 2) Slv = 1;
    
    //:::::::::::::::::: Condition for sending message / command data to Slave 1 (ESP32 Slave 1).
    if (Slv == 1) {
      Humd[0] = 0;
      Temp[0] = 0.00;
      sendMessage("", Destination_ESP32_Slave_1, get_Data_Mode);
    }
    //:::::::::::::::::: 
    
    //:::::::::::::::::: Condition for sending message / command data to Slave 2 (ESP32 Slave 2).
    if (Slv == 2) {
      Humd[1] = 0;
      Temp[1] = 0.00;
      sendMessage("", Destination_ESP32_Slave_2, get_Data_Mode);
    }
    //:::::::::::::::::: 
  }
  //---------------------------------------- 

  //---------------------------------------- 
  if (finished_Sending_Message == true && finished_Receiving_Message == true) {
    if (send_Control_LED == true) {
      delay(250);
      send_Control_LED = false;
      if (Slave_Number == "S1") {
        Message = "";
        Message = LED_Number + "," + LED_Value;
        sendMessage(Message, Destination_ESP32_Slave_1, led_Control_Mode);
      }
      if (Slave_Number == "S2") {
        Message = "";
        Message = LED_Number + "," + LED_Value;
        sendMessage(Message, Destination_ESP32_Slave_2, led_Control_Mode);
      }
      delay(250);
    }
  }
  //---------------------------------------- 

  //---------------------------------------- Millis/Timer to reset Lora Ra-02.
  //  - Lora Ra-02 reset is required for long term use.
  //  - That means the Lora Ra-02 is on and working for a long time.
  //  - From my experience when using Lora Ra-02 for a long time, there are times when Lora Ra-02 seems to "freeze" or an error, 
  //    so it can't send and receive messages. It doesn't happen often, but it does happen sometimes. 
  //    So I added a method to reset Lora Ra-02 to solve that problem. As a result, the method was successful in solving the problem.
  //  - This method of resetting the Lora Ra-02 works by checking whether there are incoming messages, 
  //    if no messages are received for approximately 30 seconds, then the Lora Ra-02 is considered to be experiencing "freezing" or error, so a reset is carried out.

  unsigned long currentMillis_RestartLORA = millis();
  
  if (currentMillis_RestartLORA - previousMillis_RestartLORA >= interval_RestartLORA) {
    previousMillis_RestartLORA = currentMillis_RestartLORA;

    count_to_Rst_LORA++;
    if (count_to_Rst_LORA > 30) {
      LoRa.end();
      Rst_LORA();
    }
  }
  //----------------------------------------

  //----------------------------------------parse for a packet, and call onReceive with the result:
  onReceive(LoRa.parsePacket());
  //----------------------------------------
}
//________________________________________________________________________________ 
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

------------------------------------------------------------------------------------------- PageIndex.h STA MODE
const char MAIN_page[] PROGMEM = R"=====(
<!DOCTYPE HTML>
<html>
  <head>
    <title>ESP32 LORA RA-02 WEB SERVER</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
    <link rel="icon" href="data:,">
    <style>
      html {font-family: Arial; display: inline-block; text-align: center;}
      p {font-size: 1.2rem;}
      h4 {font-size: 0.8rem;}
      body {margin: 0;}
      .topnav {overflow: hidden; background-color: #00878F; color: white; font-size: 1.2rem;}
      .content {padding: 5px; }
      .card {background-color: white; box-shadow: 0px 0px 10px 1px rgba(140,140,140,.5); border: 1px solid #00878f; border-radius: 15px;}
      .card.header {background-color: #00878f; color: white; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; border-top-right-radius: 12px; border-top-left-radius: 12px;}
      .cards {max-width: 700px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));}
      .reading {font-size: 1.3rem;}
      .packet {color: #bebebe;}
      .temperatureColor {color: #fd7e14;}
      .humidityColor {color: #1b78e2;}
      .statusreadColor {color: #702963; font-size:12px;}
      .LEDColor {color: #183153;}
      
      /* ----------------------------------- Toggle Switch */
      .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
      }

      .switch input {display:none;}

      .sliderTS {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #D3D3D3;
        -webkit-transition: .4s;
        transition: .4s;
        border-radius: 34px;
      }

      .sliderTS:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 4px;
        bottom: 4px;
        background-color: #f7f7f7;
        -webkit-transition: .4s;
        transition: .4s;
        border-radius: 50%;
      }

      input:checked + .sliderTS {
        background-color: #00878F;
      }

      input:focus + .sliderTS {
        box-shadow: 0 0 1px #2196F3;
      }

      input:checked + .sliderTS:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
      }

      .sliderTS:after {
        content:'OFF';
        color: white;
        display: block;
        position: absolute;
        transform: translate(-50%,-50%);
        top: 50%;
        left: 70%;
        font-size: 10px;
        font-family: Verdana, sans-serif;
      }

      input:checked + .sliderTS:after {  
        left: 25%;
        content:'ON';
      }

      input:disabled + .sliderTS {  
        opacity: 0.3;
        cursor: not-allowed;
        pointer-events: none;
      }
      /* ----------------------------------- */
      
      /* ----------------------------------- Tooltip */
      .tooltip {
        position: relative;
        display: inline-block;
      }

      .tooltip .tooltiptext {
        visibility: hidden;
        width: 120px;
        background-color: #00878F;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px 0;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -60px;
        opacity: 0;
        /*transition: opacity 0.3s;*/
        transition: visibility 0s linear 300ms, opacity 300ms;
      }

      .tooltip .tooltiptext::after {
        content: "";
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: #00878F transparent transparent transparent;
      }

      .tooltip:hover .tooltiptext {
        visibility: visible;
        animation: tooltipkeys 3s 1;
        opacity: 1;
      }
      @-webkit-keyframes tooltipkeys{ 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      @-moz-keyframes tooltipkeys{ 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      @-o-keyframes tooltipkeys{ 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      @keyframes tooltipkeys { 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      /* ----------------------------------- */
    </style>
  </head>
  
  <body>
    <div class="topnav">
      <h3>ESP32 LORA RA-02 WEB SERVER</h3>
    </div>
    
    <br>
    
    <!-- __ DISPLAYS MONITORING AND CONTROLLING ____________________________________________________________________________________________ -->
    <div class="content">
      <div class="cards">
        
        <!-- == ESP32 Slave 1 Monitoring And Controlling =========================================================== -->
        <div class="card">
          <div class="card header">
            <h3 style="font-size: 1.2rem;">ESP32 SLAVE 1</h3>
          </div>
          
          <!-- Displays the humidity and temperature values received from Slave 1. *** -->
          <h4 class="temperatureColor"><i class="fas fa-thermometer-half"></i> TEMPERATURE</h4>
          <p class="temperatureColor"><span class="reading"><span id="temp_Slave_1"></span> &deg;C</span></p>
          <h4 class="humidityColor"><i class="fas fa-tint"></i> HUMIDITY</h4>
          <p class="humidityColor"><span class="reading"><span id="humd_Slave_1"></span> &percnt;</span></p>
          <!-- *********************************************************************** -->
          
          <!-- Buttons for controlling the LEDs on Slave 1. ************************** -->
          <div style="position:relative;">
            <div style="position:relative; float: left;top: 3px;width: 47%;left: 0px;text-align: right;">
              <span class="LEDColor" style="font-weight:bold;"><i class="fas fa-lightbulb"></i> LED 1 : </span>
            </div>
            <div style="position:relative; float: right;width: 51%; right: 0px;">
              <div style="position:relative; float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_1_Slave_1" onclick="send_LED_State('togLED_1_Slave_1','S1','1')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_1_Slave_1')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
            
            <div style="position:relative; float: left;top: 18px;width: 47%;left: 0px; text-align: right;">
              <span class="LEDColor" style="font-weight:bold;"><i class="fas fa-lightbulb"></i> LED 2 : </span>
            </div>
            <div style="position:relative;float: right; width: 51%;right: 0px; top: 5px;">
              <div style="position:relative; float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_2_Slave_1" onclick="send_LED_State('togLED_2_Slave_1','S1','2')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_2_Slave_1')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
          </div>
          <!-- *********************************************************************** -->
          
          <br><br><br><br>
          
          <!-- Shows other information received from Slave 1. ************************ -->
          <p class="statusreadColor"><b><span>Last time to receive data : </span><span id="LTRD_Slave_1"></span></b></p>
          <p class="statusreadColor"><span>Status Read Sensor DHT11 : </span><span id="status_read_DHT11_Slave_1"></span></p>
          <p class="statusreadColor"><span>LED 1 State : </span><span id="LED_1_State_Slave_1"></span></p>
          <p class="statusreadColor"><span>LED 2 State : </span><span id="LED_2_State_Slave_1"></span></p>
          <!-- *********************************************************************** -->
        </div>
        <!-- ======================================================================================================= -->
        
        <!-- == ESP32 Slave 2 Monitoring And Controlling =========================================================== -->
        <div class="card">
          <div class="card header">
            <h3 style="font-size: 1.2rem;">ESP32 SLAVE 2</h3>
          </div>
          
          <!-- Displays the humidity and temperature values received from Slave 2. *** -->
          <h4 class="temperatureColor"><i class="fas fa-thermometer-half"></i> TEMPERATURE</h4>
          <p class="temperatureColor"><span class="reading"><span id="temp_Slave_2"></span> &deg;C</span></p>
          <h4 class="humidityColor"><i class="fas fa-tint"></i> HUMIDITY</h4>
          <p class="humidityColor"><span class="reading"><span id="humd_Slave_2"></span> &percnt;</span></p>
          <!-- *********************************************************************** -->
          
          <!-- Buttons for controlling the LEDs on Slave 2. ************************** -->
          <div style="position:relative;">
            <div style="position:relative; float: left;top: 3px;width: 47%; left: 0px;text-align: right;">
              <span class="LEDColor" style="font-weight:bold;"><i class="fas fa-lightbulb"></i> LED 1 : </span>
            </div>
            <div style="position:relative; float: right; width: 51%; right: 0px;">
              <div style="position:relative; float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_1_Slave_2" onclick="send_LED_State('togLED_1_Slave_2','S2','1')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_1_Slave_2')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
            
            <div style="position:relative;float: left;top: 18px;width: 47%;left: 0px; text-align: right;">
              <span class="LEDColor" style="font-weight:bold;"><i class="fas fa-lightbulb"></i> LED 2 : </span>
            </div>
            <div style="position:relative; float: right;width: 51%;right: 0px;top: 5px;">
              <div style="position:relative;float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_2_Slave_2" onclick="send_LED_State('togLED_2_Slave_2','S2','2')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_2_Slave_2')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
          </div>
          <!-- *********************************************************************** -->
          
          <br><br><br><br>
          
          <!-- Shows other information received from Slave 2. ************************ -->
          <p class="statusreadColor"><b><span>Last time to receive data : </span><span id="LTRD_Slave_2"></span></b></p>
          <p class="statusreadColor"><span>Status Read Sensor DHT11 : </span><span id="status_read_DHT11_Slave_2"></span></p>
          <p class="statusreadColor"><span>LED 1 State : </span><span id="LED_1_State_Slave_2"></span></p>
          <p class="statusreadColor"><span>LED 2 State : </span><span id="LED_2_State_Slave_2"></span></p>
          <!-- *********************************************************************** -->
        </div>  
        <!-- ======================================================================================================= -->
        
      </div>
    </div>
    <!-- ___________________________________________________________________________________________________________________________________ -->
    
    <p id="Show_Info" style="font-size: 0.9rem; color: #00878F;"></p>
    
    <script>
      //------------------------------------------------------------
      var Timer = setInterval(myTimer, 100);
      var TimerShowInfo = setInterval(myTimerShowInfo, 100);
      var count_to_Ctrl_TglBtn = 0;
      var count_to_Show_Info = 0;
      var count_to_Show_Info_no_Data_is_coming = 0;
      let change_TglBtn_Disable = false;
      let start_Show_Info_For_First_Time = true;
      //------------------------------------------------------------
      
      //------------------------------------------------------------
      document.getElementById("temp_Slave_1").innerHTML = "NN"; 
      document.getElementById("humd_Slave_1").innerHTML = "NN";
      document.getElementById("status_read_DHT11_Slave_1").innerHTML = "NN";
      document.getElementById("LTRD_Slave_1").innerHTML = "NN";
      document.getElementById("LED_1_State_Slave_1").innerHTML = "NN";
      document.getElementById("LED_2_State_Slave_1").innerHTML = "NN";
      
      
      document.getElementById("temp_Slave_2").innerHTML = "NN"; 
      document.getElementById("humd_Slave_2").innerHTML = "NN";
      document.getElementById("status_read_DHT11_Slave_2").innerHTML = "NN";
      document.getElementById("LTRD_Slave_2").innerHTML = "NN";
      document.getElementById("LED_1_State_Slave_2").innerHTML = "NN";
      document.getElementById("LED_2_State_Slave_2").innerHTML = "NN";

      document.getElementById("Show_Info").innerHTML = "Please wait a while to receive data from Slaves.";
      //------------------------------------------------------------

      //------------------------------------------------------------ Processes the data received from the ESP32 Master.
      if (!!window.EventSource) {
        var source = new EventSource('/events');
        
        source.addEventListener('open', function(e) {
          console.log("Events Connected");
        }, false);
        
        source.addEventListener('error', function(e) {
          if (e.target.readyState != EventSource.OPEN) {
            console.log("Events Disconnected");
          }
        }, false);
        
        source.addEventListener('message', function(e) {
          console.log("message", e.data);
        }, false);

        source.addEventListener('allDataJSON', function(e) {
          console.log("allDataJSON", e.data);

          var today = new Date();
          var time = leading_zeros(today.getHours()) + ":" + leading_zeros(today.getMinutes()) + ":" + leading_zeros(today.getSeconds());

          count_to_Show_Info_no_Data_is_coming = 0;
          if (document.getElementById("Show_Info").innerHTML == "No data comes from all Slaves after 10 seconds from the last time the Master received data.") {
            document.getElementById("Show_Info").innerHTML = "";
          }
          
          var obj = JSON.parse(e.data);
          
          if (obj.ID_Slave == "S1") {
            document.getElementById("status_read_DHT11_Slave_1").innerHTML = obj.StatusReadDHT11;
            if (obj.StatusReadDHT11 == "FAILED") {
              document.getElementById("status_read_DHT11_Slave_1").style.color = "red";
            } else {
              document.getElementById("status_read_DHT11_Slave_1").style.color = "#702963";
            }
            
            document.getElementById("humd_Slave_1").innerHTML = obj.Humd;
            document.getElementById("temp_Slave_1").innerHTML = obj.Temp.toFixed(2);
            
            if (obj.LED1 == true) {
              document.getElementById("LED_1_State_Slave_1").innerHTML = "ON";
            } else if (obj.LED1 == false) {
              document.getElementById("LED_1_State_Slave_1").innerHTML = "OFF";
            } else {
              document.getElementById("LED_1_State_Slave_1").innerHTML = "NN";
            }
            
            if (obj.LED2 == true) {
              document.getElementById("LED_2_State_Slave_1").innerHTML = "ON";
            } else if (obj.LED2 == false) {
              document.getElementById("LED_2_State_Slave_1").innerHTML = "OFF";
            } else {
              document.getElementById("LED_2_State_Slave_1").innerHTML = "NN";
            }
            
            document.getElementById("LTRD_Slave_1").innerHTML = time;
          }
          
          if (obj.ID_Slave == "S2") {
            document.getElementById("status_read_DHT11_Slave_2").innerHTML = obj.StatusReadDHT11;
            
            if (obj.StatusReadDHT11 == "FAILED") {
              document.getElementById("status_read_DHT11_Slave_2").style.color = "red";
            } else {
              document.getElementById("status_read_DHT11_Slave_2").style.color = "#702963";
            }
            
            document.getElementById("humd_Slave_2").innerHTML = obj.Humd;
            document.getElementById("temp_Slave_2").innerHTML = obj.Temp.toFixed(2);
            
            if (obj.LED1 == true) {
              document.getElementById("LED_1_State_Slave_2").innerHTML = "ON";
            } else if (obj.LED1 == false) {
              document.getElementById("LED_1_State_Slave_2").innerHTML = "OFF";
            } else {
              document.getElementById("LED_1_State_Slave_2").innerHTML = "NN";
            }
            
            if (obj.LED2 == true) {
              document.getElementById("LED_2_State_Slave_2").innerHTML = "ON";
            } else if (obj.LED2 == false) {
              document.getElementById("LED_2_State_Slave_2").innerHTML = "OFF";
            } else {
              document.getElementById("LED_2_State_Slave_2").innerHTML = "NN";
            }
            
            document.getElementById("LTRD_Slave_2").innerHTML = time;
          }
        }, false);
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ Timer to deactivate the button a few moments after being clicked.
      function myTimer() {
        if (change_TglBtn_Disable == true) {
          count_to_Ctrl_TglBtn += 100;
          if (count_to_Ctrl_TglBtn > 1000) {
            count_to_Ctrl_TglBtn = 0;
            change_TglBtn_Disable = false;
            
            document.getElementById("togLED_1_Slave_1").disabled = false;
            document.getElementById("togLED_2_Slave_1").disabled = false;
            document.getElementById("togLED_1_Slave_2").disabled = false;
            document.getElementById("togLED_2_Slave_2").disabled = false; 
          }
        }
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------
      function myTimerShowInfo() {
        count_to_Show_Info_no_Data_is_coming += 100;
        if (count_to_Show_Info_no_Data_is_coming > 10000) {
          count_to_Show_Info_no_Data_is_coming = 0;

          document.getElementById("Show_Info").innerHTML = "No data comes from all Slaves after 10 seconds from the last time the Master received data.";
        }
        
        count_to_Show_Info += 100;
        if (count_to_Show_Info > 1500) {
          count_to_Show_Info = 0;

          if (start_Show_Info_For_First_Time == true) {
            start_Show_Info_For_First_Time = false;
            document.getElementById("Show_Info").innerHTML = "";
            return;
          }
        
          if (document.getElementById("Show_Info").innerHTML == "Sending Data to Slave 1, Please Wait...") {
            document.getElementById("Show_Info").innerHTML = "Please wait a moment for Slave 1 to reply to the message."
            return;
          }
          if (document.getElementById("Show_Info").innerHTML == "Please wait a moment for Slave 1 to reply to the message.") {
            document.getElementById("Show_Info").innerHTML = "";
            return;
          }
          
          if (document.getElementById("Show_Info").innerHTML == "Sending Data to Slave 2, Please Wait...") {
            document.getElementById("Show_Info").innerHTML = "Please wait a moment for Slave 2 to reply to the message."
            return;
          }
          if (document.getElementById("Show_Info").innerHTML == "Please wait a moment for Slave 2 to reply to the message.") {
            document.getElementById("Show_Info").innerHTML = "";
            return;
          }
        }
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ 
      function change_TglBtn_Checked(TglBtnID) {
        var chck = document.getElementById(TglBtnID);
        chck.checked = !chck.checked;
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------
      function leading_zeros(x) { 
        return (x < 10 ? '0' : '') + x;
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ The function called by "Toggle Switch" to control the LED.
      function send_LED_State(id,slave,led_num) {
        count_to_Show_Info = 0;
        change_TglBtn_Disable = true;
        if (slave == "S1") document.getElementById("Show_Info").innerHTML = "Sending Data to Slave 1, Please Wait...";
        if (slave == "S2") document.getElementById("Show_Info").innerHTML = "Sending Data to Slave 2, Please Wait...";
        
        document.getElementById("togLED_1_Slave_1").disabled = true;
        document.getElementById("togLED_2_Slave_1").disabled = true;
        document.getElementById("togLED_1_Slave_2").disabled = true;
        document.getElementById("togLED_2_Slave_2").disabled = true;  
        
        var tgLEDFlash = document.getElementById(id);
        var tgState;

        if (tgLEDFlash.checked == true) tgState = "t";
        if (tgLEDFlash.checked == false) tgState = "f";

        send_cmd(slave,led_num,tgState);
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ XMLHttpRequest to submit data.
      function send_cmd(slave,led_num,value) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "set_LED?Slave_Num="+slave+"&LED_Num="+led_num+"&LED_Val="+value, true);
        xhr.send();
      }
      //------------------------------------------------------------
    </script>
  </body>
</html>
)=====";
-------------------------------------------------------------------------------------------



#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ESP32 Lora Ra-02 Slave (1 or 2)
// More detailed information about this project, please look at the program code for the Master.

//---------------------------------------- Include Library.
#include <SPI.h>
#include <LoRa.h>
#include "DHT.h"
//---------------------------------------- 

//---------------------------------------- Defines the DHT11 Pin and the DHT type.
#define DHTPIN      15
#define DHTTYPE     DHT11
//---------------------------------------- 

//---------------------------------------- Defines LED Pins.
#define LED_1_Pin   27
#define LED_2_Pin   25
//---------------------------------------- 

//---------------------------------------- LoRa Pin / GPIO configuration.
#define ss 5
#define rst 14
#define dio0 2
//----------------------------------------

// Initializes the DHT sensor (DHT11).
DHT dht11(DHTPIN, DHTTYPE);

//----------------------------------------String variable for LoRa
String Incoming = "";
String Message = "";
String LED_Num = "";
String LED_State = "";
//----------------------------------------

//---------------------------------------- LoRa data transmission configuration.
////////////////////////////////////////////////////////////////////////////
// PLEASE UNCOMMENT AND SELECT ONE OF THE "LocalAddress" VARIABLES BELOW. //
////////////////////////////////////////////////////////////////////////////

//byte LocalAddress = 0x02;       //--> address of this device (Slave 1).
//byte LocalAddress = 0x03;       //--> address of this device (Slave 2).
byte Destination_Master = 0x01; //--> destination to send to Master (ESP32).
//----------------------------------------

//---------------------------------------- Variable declarations for the reading status of the DHT11 sensor, temperature and humidity values.
int Humd = 0;
float Temp = 0.00;
String send_Status_Read_DHT11 = "";
//---------------------------------------- 

//---------------------------------------- Variable declaration for Millis/Timer.
unsigned long previousMillis_UpdateDHT11 = 0;
const long interval_UpdateDHT11 = 2000;

unsigned long previousMillis_RestartLORA = 0;
const long interval_RestartLORA = 1000;
//---------------------------------------- 

// Declaration of variable as counter to restart Lora Ra-02.
byte Count_to_Rst_LORA = 0;

//________________________________________________________________________________ Subroutines for sending data (LoRa Ra-02).
void sendMessage(String Outgoing, byte Destination) {
  LoRa.beginPacket();             //--> start packet
  LoRa.write(Destination);        //--> add destination address
  LoRa.write(LocalAddress);       //--> add sender address
  LoRa.write(Outgoing.length());  //--> add payload length
  LoRa.print(Outgoing);           //--> add payload
  LoRa.endPacket();               //--> finish packet and send it
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutines for receiving data (LoRa Ra-02).
void onReceive(int packetSize) {
  if (packetSize == 0) return;          // if there's no packet, return

  //---------------------------------------- read packet header bytes:
  int recipient = LoRa.read();        //--> recipient address
  byte sender = LoRa.read();          //--> sender address
  byte incomingLength = LoRa.read();  //--> incoming msg length
  byte master_Send_Mode = LoRa.read();
  //---------------------------------------- 

  //---------------------------------------- Condition that is executed if message is not from Master.
  if (sender != Destination_Master) {
    Serial.println();
    Serial.println("i"); //--> "i" = Not from Master, Ignore.
    //Serial.println("Not from Master, Ignore");

    // Resets the value of the Count_to_Rst_LORA variable.
    Count_to_Rst_LORA = 0;
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  // Clears Incoming variable data.
  Incoming = "";

  //---------------------------------------- Get all incoming data.
  while (LoRa.available()) {
    Incoming += (char)LoRa.read();
  }
  //---------------------------------------- 

  // Resets the value of the Count_to_Rst_LORA variable.
  Count_to_Rst_LORA = 0;

  //---------------------------------------- Check length for error.
  if (incomingLength != Incoming.length()) {
    Serial.println();
    Serial.println("er"); //--> "er" = error: message length does not match length.
    //Serial.println("error: message length does not match length");
    return; //--> skip rest of function
  }
  //---------------------------------------- 

  //---------------------------------------- Checks whether the incoming data or message for this device.
  if (recipient != LocalAddress) {
    Serial.println();
    Serial.println("!");  //--> "!" = This message is not for me.
    //Serial.println("This message is not for me.");
    return; //--> skip rest of function
  } else {
    // if message is for this device, or broadcast, print details:
    Serial.println();
    Serial.println("Rc from: 0x" + String(sender, HEX));
    Serial.println("Message: " + Incoming);

    // Calls the Processing_incoming_data() subroutine.
    if (master_Send_Mode == 1) Processing_incoming_data();
    
    // Calls the Processing_incoming_data_for_Ctrl_LEDs() subroutine.
    if (master_Send_Mode == 2) Processing_incoming_data_for_Ctrl_LEDs();
  }
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutine to process the data to be sent, after that it sends a message to the Master.
void Processing_incoming_data() {
  // Get the last state of the LEDs.
  byte LED_1_State = digitalRead(LED_1_Pin);
  byte LED_2_State = digitalRead(LED_2_Pin);

  // Fill in the "Message" variable with the DHT11 sensor reading status, humidity value, temperature value, state of LED 1 and LED 2.
  Message = "";
  Message = send_Status_Read_DHT11 + "," + String(Humd) + "," + String(Temp) + "," + String(LED_1_State) + "," + String(LED_2_State);
  
  Serial.println();
  Serial.println("Tr to  : 0x" + String(Destination_Master, HEX));
  Serial.println("Message: " + Message);

  // Send a message to Master.
  sendMessage(Message, Destination_Master);
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutines for processing data from incoming messages to Controlling the LEDs.
void Processing_incoming_data_for_Ctrl_LEDs() {

//  - The data received from the Master when the LED control mode is: "LED_number,LED_state".
//  - For example, the Master wants to turn on LED 1. Then the contents of the message received are: "1,t"
//    > "1" = LED number controlled.
//    > "t" = LED state. "t" to turn on and "f" to turn off.

  LED_Num = GetValue(Incoming, ',', 0);
  LED_State = GetValue(Incoming, ',', 1);

  if (LED_Num == "1") {
    if (LED_State == "t") digitalWrite(LED_1_Pin, HIGH);
    if (LED_State == "f") digitalWrite(LED_1_Pin, LOW);
  }

  if (LED_Num == "2") {
    if (LED_State == "t") digitalWrite(LED_2_Pin, HIGH);
    if (LED_State == "f") digitalWrite(LED_2_Pin, LOW);
  }
}
//________________________________________________________________________________ 

//________________________________________________________________________________ String function to process the data received
// I got this from : https://www.electroniclinic.com/reyax-lora-based-multiple-sensors-monitoring-using-arduino/
String GetValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;
  
  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
//________________________________________________________________________________ 

//________________________________________________________________________________ Subroutine to reset Lora Ra-02.
void Rst_LORA() {
  LoRa.setPins(ss, rst, dio0);

  Serial.println();
  Serial.println(F("Restart LoRa..."));
  Serial.println(F("Start LoRa init..."));
  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 or 433 MHz
    Serial.println(F("LoRa init failed. Check your connections."));
    while (true);                       // if failed, do nothing
  }
  Serial.println(F("LoRa init succeeded."));

  // Resets the value of the Count_to_Rst_LORA variable.
  Count_to_Rst_LORA = 0;
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID SETUP
void setup() {
  // put your setup code here, to run once:

  Serial.begin(115200);

  pinMode(LED_1_Pin, OUTPUT);
  pinMode(LED_2_Pin, OUTPUT);

  // Calls the Rst_LORA() subroutine.
  Rst_LORA();
  
  dht11.begin();
}
//________________________________________________________________________________ 

//________________________________________________________________________________ VOID LOOP
void loop() {
  // put your main code here, to run repeatedly:

  //---------------------------------------- Millis / Timer to update the temperature and humidity values ​​from the DHT11 sensor every 2 seconds (see the variable interval_UpdateDHT11).
  unsigned long currentMillis_UpdateDHT11 = millis();
  
  if (currentMillis_UpdateDHT11 - previousMillis_UpdateDHT11 >= interval_UpdateDHT11) {
    previousMillis_UpdateDHT11 = currentMillis_UpdateDHT11;

    // Reading temperature or humidity takes about 250 milliseconds!
    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    Humd = dht11.readHumidity();
    // Read temperature as Celsius (the default)
    Temp = dht11.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
    //float f = dht.readTemperature(true);
  
    // Check if any reads failed and exit early (to try again).
    if (isnan(Humd) || isnan(Temp)) {
      Humd = 0;
      Temp = 0.00;
      send_Status_Read_DHT11 = "f";
      Serial.println(F("Failed to read from DHT sensor!"));
      return;
    } else {
      send_Status_Read_DHT11 = "s";
    }
  }
  //---------------------------------------- 

  //---------------------------------------- Millis/Timer to reset Lora Ra-02.
  // Please see the Master program code for more detailed information about the Lora reset method.
  
  unsigned long currentMillis_RestartLORA = millis();
  
  if (currentMillis_RestartLORA - previousMillis_RestartLORA >= interval_RestartLORA) {
    previousMillis_RestartLORA = currentMillis_RestartLORA;

    Count_to_Rst_LORA++;
    if (Count_to_Rst_LORA > 30) {
      LoRa.end();
      Rst_LORA();
    }
  }
  //---------------------------------------- 

  //---------------------------------------- parse for a packet, and call onReceive with the result:
  onReceive(LoRa.parsePacket());
  //----------------------------------------
}
//________________________________________________________________________________ 
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



#################################################################################################
#################################################################################################
#################################################################################################
#################################################################################################



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ESP32 Lora Ra-02 Master Web Server AP MODE
//---------------------------------------- Access Point Declaration and Configuration.
const char* ssid = "ESP32_WS";  //--> access point name
const char* password = "helloesp32WS"; //--> access point password

IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);
//----------------------------------------
  
  //---------------------------------------- Set Wifi to AP mode
  Serial.println();
  Serial.println("-------------");
  Serial.println("WIFI mode : AP");
  WiFi.mode(WIFI_AP);
  Serial.println("-------------");
  //---------------------------------------- 

  //---------------------------------------- Setting up ESP32 to be an Access Point.
  Serial.println();
  Serial.println("-------------");
  Serial.println("Setting up ESP32 to be an Access Point.");
  WiFi.softAP(ssid, password); //--> Creating Access Points
  delay(1000);
  Serial.println("Setting up ESP32 softAPConfig.");
  WiFi.softAPConfig(local_ip, gateway, subnet);
  Serial.println("-------------");
  //----------------------------------------
  
  Serial.println();
  Serial.println("------------");
  Serial.print("SSID name : ");
  Serial.println(ssid);
  Serial.print("IP address : ");
  Serial.println(WiFi.softAPIP());
  Serial.println();
  Serial.println("Connect your computer or mobile Wifi to the SSID above.");
  Serial.println("Visit the IP Address above in your browser to open the main page.");
  Serial.println("------------");
  Serial.println();
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

------------------------------------------------------------------------------------------- PageIndex.h AP MODE
const char MAIN_page[] PROGMEM = R"=====(
<!DOCTYPE HTML>
<html>
  <head>
    <title>ESP32 LORA RA-02 WEB SERVER</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      html {font-family: Arial; display: inline-block; text-align: center;}
      p {font-size: 1.2rem;}
      h4 {font-size: 0.8rem;}
      body {margin: 0;}
      .topnav {overflow: hidden; background-color: #00878F; color: white; font-size: 1.2rem;}
      .content {padding: 5px; }
      .card {background-color: white; box-shadow: 0px 0px 10px 1px rgba(140,140,140,.5); border: 1px solid #00878f; border-radius: 15px;}
      .card.header {background-color: #00878f; color: white; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; border-top-right-radius: 12px; border-top-left-radius: 12px;}
      .cards {max-width: 700px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));}
      .reading {font-size: 1.3rem;}
      .packet {color: #bebebe;}
      .temperatureColor {color: #fd7e14;}
      .humidityColor {color: #1b78e2;}
      .statusreadColor {color: #702963; font-size:12px;}
      .LEDColor {color: #183153;}
      
      /* ----------------------------------- Toggle Switch */
      .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
      }

      .switch input {display:none;}

      .sliderTS {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #D3D3D3;
        -webkit-transition: .4s;
        transition: .4s;
        border-radius: 34px;
      }

      .sliderTS:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 4px;
        bottom: 4px;
        background-color: #f7f7f7;
        -webkit-transition: .4s;
        transition: .4s;
        border-radius: 50%;
      }

      input:checked + .sliderTS {
        background-color: #00878F;
      }

      input:focus + .sliderTS {
        box-shadow: 0 0 1px #2196F3;
      }

      input:checked + .sliderTS:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
      }

      .sliderTS:after {
        content:'OFF';
        color: white;
        display: block;
        position: absolute;
        transform: translate(-50%,-50%);
        top: 50%;
        left: 70%;
        font-size: 10px;
        font-family: Verdana, sans-serif;
      }

      input:checked + .sliderTS:after {  
        left: 25%;
        content:'ON';
      }

      input:disabled + .sliderTS {  
        opacity: 0.3;
        cursor: not-allowed;
        pointer-events: none;
      }
      /* ----------------------------------- */
      
      /* ----------------------------------- Tooltip */
      .tooltip {
        position: relative;
        display: inline-block;
      }

      .tooltip .tooltiptext {
        visibility: hidden;
        width: 120px;
        background-color: #00878F;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px 0;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -60px;
        opacity: 0;
        /*transition: opacity 0.3s;*/
        transition: visibility 0s linear 300ms, opacity 300ms;
      }

      .tooltip .tooltiptext::after {
        content: "";
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: #00878F transparent transparent transparent;
      }

      .tooltip:hover .tooltiptext {
        visibility: visible;
        animation: tooltipkeys 3s 1;
        opacity: 1;
      }
      @-webkit-keyframes tooltipkeys{ 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      @-moz-keyframes tooltipkeys{ 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      @-o-keyframes tooltipkeys{ 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      @keyframes tooltipkeys { 0%   {opacity: 0;} 75%  {opacity: 0;} 100% {opacity: 1;} }
      /* ----------------------------------- */
    </style>
  </head>
  
  <body>
    <div class="topnav">
      <h3>ESP32 LORA RA-02 WEB SERVER</h3>
    </div>
    
    <br>
    
    <!-- __ DISPLAYS MONITORING AND CONTROLLING ____________________________________________________________________________________________ -->
    <div class="content">
      <div class="cards">
        
        <!-- == ESP32 Slave 1 Monitoring And Controlling =========================================================== -->
        <div class="card">
          <div class="card header">
            <h3 style="font-size: 1.2rem;">ESP32 SLAVE 1</h3>
          </div>
          
          <!-- Displays the humidity and temperature values received from Slave 1. *** -->
          <h4 class="temperatureColor">TEMPERATURE</h4>
          <p class="temperatureColor"><span class="reading"><span id="temp_Slave_1"></span> &deg;C</span></p>
          <h4 class="humidityColor">HUMIDITY</h4>
          <p class="humidityColor"><span class="reading"><span id="humd_Slave_1"></span> &percnt;</span></p>
          <!-- *********************************************************************** -->
          
          <!-- Buttons for controlling the LEDs on Slave 1. ************************** -->
          <div style="position:relative;">
            <div style="position:relative; float: left;top: 3px;width: 47%;left: 0px;text-align: right;">
              <span class="LEDColor" style="font-weight:bold;">LED 1 : </span>
            </div>
            <div style="position:relative; float: right;width: 51%; right: 0px;">
              <div style="position:relative; float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_1_Slave_1" onclick="send_LED_State('togLED_1_Slave_1','S1','1')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_1_Slave_1')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
            
            <div style="position:relative; float: left;top: 18px;width: 47%;left: 0px; text-align: right;">
              <span class="LEDColor" style="font-weight:bold;">LED 2 : </span>
            </div>
            <div style="position:relative;float: right; width: 51%;right: 0px; top: 5px;">
              <div style="position:relative; float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_2_Slave_1" onclick="send_LED_State('togLED_2_Slave_1','S1','2')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_2_Slave_1')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
          </div>
          <!-- *********************************************************************** -->
          
          <br><br><br><br>
          
          <!-- Shows other information received from Slave 1. ************************ -->
          <p class="statusreadColor"><b><span>Last time to receive data : </span><span id="LTRD_Slave_1"></span></b></p>
          <p class="statusreadColor"><span>Status Read Sensor DHT11 : </span><span id="status_read_DHT11_Slave_1"></span></p>
          <p class="statusreadColor"><span>LED 1 State : </span><span id="LED_1_State_Slave_1"></span></p>
          <p class="statusreadColor"><span>LED 2 State : </span><span id="LED_2_State_Slave_1"></span></p>
          <!-- *********************************************************************** -->
        </div>
        <!-- ======================================================================================================= -->
        
        <!-- == ESP32 Slave 2 Monitoring And Controlling =========================================================== -->
        <div class="card">
          <div class="card header">
            <h3 style="font-size: 1.2rem;">ESP32 SLAVE 2</h3>
          </div>
          
          <!-- Displays the humidity and temperature values received from Slave 2. *** -->
          <h4 class="temperatureColor">TEMPERATURE</h4>
          <p class="temperatureColor"><span class="reading"><span id="temp_Slave_2"></span> &deg;C</span></p>
          <h4 class="humidityColor">HUMIDITY</h4>
          <p class="humidityColor"><span class="reading"><span id="humd_Slave_2"></span> &percnt;</span></p>
          <!-- *********************************************************************** -->
          
          <!-- Buttons for controlling the LEDs on Slave 2. ************************** -->
          <div style="position:relative;">
            <div style="position:relative; float: left;top: 3px;width: 47%; left: 0px;text-align: right;">
              <span class="LEDColor" style="font-weight:bold;">LED 1 : </span>
            </div>
            <div style="position:relative; float: right; width: 51%; right: 0px;">
              <div style="position:relative; float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_1_Slave_2" onclick="send_LED_State('togLED_1_Slave_2','S2','1')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_1_Slave_2')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
            
            <div style="position:relative;float: left;top: 18px;width: 47%;left: 0px; text-align: right;">
              <span class="LEDColor" style="font-weight:bold;">LED 2 : </span>
            </div>
            <div style="position:relative; float: right;width: 51%;right: 0px;top: 5px;">
              <div style="position:relative;float: left;">
                <label class="switch">
                  <input type="checkbox" id="togLED_2_Slave_2" onclick="send_LED_State('togLED_2_Slave_2','S2','2')">
                  <div class="sliderTS"></div>
                </label>
              </div>
              <div class="tooltip" style="float: left; margin-left: 8px;">
                <span class="tooltiptext">Invert the toggle button state.</span>
                <button type="button" onclick="change_TglBtn_Checked('togLED_2_Slave_2')" style="height: 24px; line-height: 24px; font-size: 13px; display: inline-flex; align-items: center;">&#8644;</button>
              </div>
            </div>
          </div>
          <!-- *********************************************************************** -->
          
          <br><br><br><br>
          
          <!-- Shows other information received from Slave 2. ************************ -->
          <p class="statusreadColor"><b><span>Last time to receive data : </span><span id="LTRD_Slave_2"></span></b></p>
          <p class="statusreadColor"><span>Status Read Sensor DHT11 : </span><span id="status_read_DHT11_Slave_2"></span></p>
          <p class="statusreadColor"><span>LED 1 State : </span><span id="LED_1_State_Slave_2"></span></p>
          <p class="statusreadColor"><span>LED 2 State : </span><span id="LED_2_State_Slave_2"></span></p>
          <!-- *********************************************************************** -->
        </div>  
        <!-- ======================================================================================================= -->
        
      </div>
    </div>
    <!-- ___________________________________________________________________________________________________________________________________ -->
    
    <p id="Show_Info" style="font-size: 0.9rem; color: #00878F;"></p>
    
    <script>
      //------------------------------------------------------------
      var Timer = setInterval(myTimer, 100);
      var TimerShowInfo = setInterval(myTimerShowInfo, 100);
      var count_to_Ctrl_TglBtn = 0;
      var count_to_Show_Info = 0;
      var count_to_Show_Info_no_Data_is_coming = 0;
      let change_TglBtn_Disable = false;
      let start_Show_Info_For_First_Time = true;
      //------------------------------------------------------------
      
      //------------------------------------------------------------
      document.getElementById("temp_Slave_1").innerHTML = "NN"; 
      document.getElementById("humd_Slave_1").innerHTML = "NN";
      document.getElementById("status_read_DHT11_Slave_1").innerHTML = "NN";
      document.getElementById("LTRD_Slave_1").innerHTML = "NN";
      document.getElementById("LED_1_State_Slave_1").innerHTML = "NN";
      document.getElementById("LED_2_State_Slave_1").innerHTML = "NN";
      
      
      document.getElementById("temp_Slave_2").innerHTML = "NN"; 
      document.getElementById("humd_Slave_2").innerHTML = "NN";
      document.getElementById("status_read_DHT11_Slave_2").innerHTML = "NN";
      document.getElementById("LTRD_Slave_2").innerHTML = "NN";
      document.getElementById("LED_1_State_Slave_2").innerHTML = "NN";
      document.getElementById("LED_2_State_Slave_2").innerHTML = "NN";

      document.getElementById("Show_Info").innerHTML = "Please wait a while to receive data from Slaves.";
      //------------------------------------------------------------

      //------------------------------------------------------------ Processes the data received from the ESP32 Master.
      if (!!window.EventSource) {
        var source = new EventSource('/events');
        
        source.addEventListener('open', function(e) {
          console.log("Events Connected");
        }, false);
        
        source.addEventListener('error', function(e) {
          if (e.target.readyState != EventSource.OPEN) {
            console.log("Events Disconnected");
          }
        }, false);
        
        source.addEventListener('message', function(e) {
          console.log("message", e.data);
        }, false);

        source.addEventListener('allDataJSON', function(e) {
          console.log("allDataJSON", e.data);

          var today = new Date();
          var time = leading_zeros(today.getHours()) + ":" + leading_zeros(today.getMinutes()) + ":" + leading_zeros(today.getSeconds());

          count_to_Show_Info_no_Data_is_coming = 0;
          if (document.getElementById("Show_Info").innerHTML == "No data comes from all Slaves after 10 seconds from the last time the Master received data.") {
            document.getElementById("Show_Info").innerHTML = "";
          }
          
          var obj = JSON.parse(e.data);
          
          if (obj.ID_Slave == "S1") {
            document.getElementById("status_read_DHT11_Slave_1").innerHTML = obj.StatusReadDHT11;
            if (obj.StatusReadDHT11 == "FAILED") {
              document.getElementById("status_read_DHT11_Slave_1").style.color = "red";
            } else {
              document.getElementById("status_read_DHT11_Slave_1").style.color = "#702963";
            }
            
            document.getElementById("humd_Slave_1").innerHTML = obj.Humd;
            document.getElementById("temp_Slave_1").innerHTML = obj.Temp.toFixed(2);
            
            if (obj.LED1 == true) {
              document.getElementById("LED_1_State_Slave_1").innerHTML = "ON";
            } else if (obj.LED1 == false) {
              document.getElementById("LED_1_State_Slave_1").innerHTML = "OFF";
            } else {
              document.getElementById("LED_1_State_Slave_1").innerHTML = "NN";
            }
            
            if (obj.LED2 == true) {
              document.getElementById("LED_2_State_Slave_1").innerHTML = "ON";
            } else if (obj.LED2 == false) {
              document.getElementById("LED_2_State_Slave_1").innerHTML = "OFF";
            } else {
              document.getElementById("LED_2_State_Slave_1").innerHTML = "NN";
            }
            
            document.getElementById("LTRD_Slave_1").innerHTML = time;
          }
          
          if (obj.ID_Slave == "S2") {
            document.getElementById("status_read_DHT11_Slave_2").innerHTML = obj.StatusReadDHT11;
            
            if (obj.StatusReadDHT11 == "FAILED") {
              document.getElementById("status_read_DHT11_Slave_2").style.color = "red";
            } else {
              document.getElementById("status_read_DHT11_Slave_2").style.color = "#702963";
            }
            
            document.getElementById("humd_Slave_2").innerHTML = obj.Humd;
            document.getElementById("temp_Slave_2").innerHTML = obj.Temp.toFixed(2);
            
            if (obj.LED1 == true) {
              document.getElementById("LED_1_State_Slave_2").innerHTML = "ON";
            } else if (obj.LED1 == false) {
              document.getElementById("LED_1_State_Slave_2").innerHTML = "OFF";
            } else {
              document.getElementById("LED_1_State_Slave_2").innerHTML = "NN";
            }
            
            if (obj.LED2 == true) {
              document.getElementById("LED_2_State_Slave_2").innerHTML = "ON";
            } else if (obj.LED2 == false) {
              document.getElementById("LED_2_State_Slave_2").innerHTML = "OFF";
            } else {
              document.getElementById("LED_2_State_Slave_2").innerHTML = "NN";
            }
            
            document.getElementById("LTRD_Slave_2").innerHTML = time;
          }
        }, false);
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ Timer to deactivate the button a few moments after being clicked.
      function myTimer() {
        if (change_TglBtn_Disable == true) {
          count_to_Ctrl_TglBtn += 100;
          if (count_to_Ctrl_TglBtn > 1000) {
            count_to_Ctrl_TglBtn = 0;
            change_TglBtn_Disable = false;
            
            document.getElementById("togLED_1_Slave_1").disabled = false;
            document.getElementById("togLED_2_Slave_1").disabled = false;
            document.getElementById("togLED_1_Slave_2").disabled = false;
            document.getElementById("togLED_2_Slave_2").disabled = false; 
          }
        }
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------
      function myTimerShowInfo() {
        count_to_Show_Info_no_Data_is_coming += 100;
        if (count_to_Show_Info_no_Data_is_coming > 10000) {
          count_to_Show_Info_no_Data_is_coming = 0;

          document.getElementById("Show_Info").innerHTML = "No data comes from all Slaves after 10 seconds from the last time the Master received data.";
        }
        
        count_to_Show_Info += 100;
        if (count_to_Show_Info > 1500) {
          count_to_Show_Info = 0;

          if (start_Show_Info_For_First_Time == true) {
            start_Show_Info_For_First_Time = false;
            document.getElementById("Show_Info").innerHTML = "";
            return;
          }
        
          if (document.getElementById("Show_Info").innerHTML == "Sending Data to Slave 1, Please Wait...") {
            document.getElementById("Show_Info").innerHTML = "Please wait a moment for Slave 1 to reply to the message."
            return;
          }
          if (document.getElementById("Show_Info").innerHTML == "Please wait a moment for Slave 1 to reply to the message.") {
            document.getElementById("Show_Info").innerHTML = "";
            return;
          }
          
          if (document.getElementById("Show_Info").innerHTML == "Sending Data to Slave 2, Please Wait...") {
            document.getElementById("Show_Info").innerHTML = "Please wait a moment for Slave 2 to reply to the message."
            return;
          }
          if (document.getElementById("Show_Info").innerHTML == "Please wait a moment for Slave 2 to reply to the message.") {
            document.getElementById("Show_Info").innerHTML = "";
            return;
          }
        }
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ 
      function change_TglBtn_Checked(TglBtnID) {
        var chck = document.getElementById(TglBtnID);
        chck.checked = !chck.checked;
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------
      function leading_zeros(x) { 
        return (x < 10 ? '0' : '') + x;
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ The function called by "Toggle Switch" to control the LED.
      function send_LED_State(id,slave,led_num) {
        count_to_Show_Info = 0;
        change_TglBtn_Disable = true;
        if (slave == "S1") document.getElementById("Show_Info").innerHTML = "Sending Data to Slave 1, Please Wait...";
        if (slave == "S2") document.getElementById("Show_Info").innerHTML = "Sending Data to Slave 2, Please Wait...";
        
        document.getElementById("togLED_1_Slave_1").disabled = true;
        document.getElementById("togLED_2_Slave_1").disabled = true;
        document.getElementById("togLED_1_Slave_2").disabled = true;
        document.getElementById("togLED_2_Slave_2").disabled = true;  
        
        var tgLEDFlash = document.getElementById(id);
        var tgState;

        if (tgLEDFlash.checked == true) tgState = "t";
        if (tgLEDFlash.checked == false) tgState = "f";

        send_cmd(slave,led_num,tgState);
      }
      //------------------------------------------------------------
      
      //------------------------------------------------------------ XMLHttpRequest to submit data.
      function send_cmd(slave,led_num,value) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "set_LED?Slave_Num="+slave+"&LED_Num="+led_num+"&LED_Val="+value, true);
        xhr.send();
      }
      //------------------------------------------------------------
    </script>
  </body>
</html>
)=====";
-------------------------------------------------------------------------------------------